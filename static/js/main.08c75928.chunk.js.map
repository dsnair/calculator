{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","expr","setExpr","exprBtn","className","readOnly","value","map","btn","index","onClick","str","concat","key","math","eval","toString","err","SyntaxError","handleEqual","document","getElementById"],"mappings":"qQAKAA,IAASC,OAAOC,EAAAC,EAAAC,cCDD,WAAe,IAAAC,EACJC,mBAAS,IADLC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACfI,EADeJ,EAAA,GAqBtBK,EAAU,CACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACV,EAAAC,EAAAC,cAAA,KAAGS,UAAU,kBAAoB,SAAU,KAC5C,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,iBAAmB,SAAU,KAC3C,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,iBAAmB,SAAU,KAC3C,CAAC,EAAG,SAAU,KACd,CAAC,IAAK,SAAU,KAChB,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,gBAAkB,SAAU,MAG5C,OACEX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,SAAOU,UAAQ,EAACC,MAAOL,EAAMG,UAAU,WAEtCD,EAAQI,IAAI,SAACC,EAAKC,GAAN,OACXhB,EAAAC,EAAAC,cAAA,UACEe,QAAS,kBA1CEC,EA0CeH,EAAI,QAxChCN,EADK,aAATD,GAAgC,QAATA,EACXU,EACAV,EAAKW,OAAOD,IAHP,IAAAA,GA2CXP,UAAWI,EAAI,GACfK,IAAKJ,GAEJD,EAAI,MAITf,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBA1CD,WAClB,IACER,EAAQY,IAAKC,KAAKd,GAAMe,YACxB,MAAOC,GACHA,aAAeC,aACjBhB,EAAQ,QAqCaiB,IAAef,UAAU,UAC7CX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,mBAGhBX,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBAhDKR,EAAQ,KAgDQE,UAAU,SAAhD,WDxDU,MAASgB,SAASC,eAAe","file":"static/js/main.08c75928.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useState } from 'react'\nimport math from 'mathjs'\nimport './App.css'\n\nexport default function App() {\n  const [expr, setExpr] = useState('')\n\n  const handleExpr = str => {\n    expr === 'Infinity' || expr === 'Err'\n      ? setExpr(str)\n      : setExpr(expr.concat(str))\n  }\n\n  const handleClear = () => setExpr('')\n\n  const handleEqual = () => {\n    try {\n      setExpr(math.eval(expr).toString())\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        setExpr('Err')\n      }\n    }\n  }\n\n  const exprBtn = [\n    [7, 'number', '7'],\n    [8, 'number', '8'],\n    [9, 'number', '9'],\n    [<i className=\"fas fa-divide\" />, 'symbol', '/'],\n    [4, 'number', '4'],\n    [5, 'number', '5'],\n    [6, 'number', '6'],\n    [<i className=\"fas fa-times\" />, 'symbol', '*'],\n    [1, 'number', '1'],\n    [2, 'number', '2'],\n    [3, 'number', '3'],\n    [<i className=\"fas fa-minus\" />, 'symbol', '-'],\n    [0, 'number', '0'],\n    ['.', 'symbol', '.'],\n    [<i className=\"fas fa-plus\" />, 'symbol', '+']\n  ]\n\n  return (\n    <div className=\"App\">\n      <input readOnly value={expr} className=\"answer\"/>\n\n      {exprBtn.map((btn, index) => (\n        <button\n          onClick={() => handleExpr(btn[2])}\n          className={btn[1]}\n          key={index}\n        >\n          {btn[0]}\n        </button>\n      ))}\n\n      <button onClick={() => handleEqual()} className=\"symbol\">\n        {<i className=\"fas fa-equals\" />}\n      </button>\n\n      <button onClick={() => handleClear()} className=\"clear\">\n        clear\n      </button>\n    </div>\n  )\n}\n"],"sourceRoot":""}