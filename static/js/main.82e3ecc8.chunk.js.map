{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","expr","setExpr","exprBtn","className","readOnly","value","map","btn","index","onClick","str","concat","key","math","round","eval","toString","err","SyntaxError","handleEqual","document","getElementById"],"mappings":"qQAKAA,IAASC,OAAOC,EAAAC,EAAAC,cCDD,WAAe,IAAAC,EACJC,mBAAS,IADLC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACfI,EADeJ,EAAA,GAqBtBK,EAAU,CACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACV,EAAAC,EAAAC,cAAA,KAAGS,UAAU,kBAAoB,WAAY,KAC9C,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,iBAAmB,WAAY,KAC7C,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAAC,EAAG,SAAU,KACd,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,iBAAmB,WAAY,KAC7C,CAAC,EAAG,SAAU,KACd,CAAC,SAAK,SAAU,KAChB,CAACX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,gBAAkB,WAAY,MAG9C,OACEX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACZH,EACCR,EAAAC,EAAAC,cAAA,SAAOU,UAAQ,EAACC,MAAOL,EAAMG,UAAU,WAEvCX,EAAAC,EAAAC,cAAA,SAAOU,UAAQ,EAACC,MAAO,EAAGF,UAAU,WAGrCD,EAAQI,IAAI,SAACC,EAAKC,GAAN,OACXhB,EAAAC,EAAAC,cAAA,UACEe,QAAS,kBA9CEC,EA8CeH,EAAI,QA5ChCN,EADK,aAATD,GAAgC,QAATA,GAA2B,QAATA,EAC7BU,EACAV,EAAKW,OAAOD,IAHP,IAAAA,GA+CXP,UAAWI,EAAI,GACfK,IAAKJ,GAEJD,EAAI,MAITf,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBA9CD,WAClB,IACER,EAAQY,IAAKC,MAAMD,IAAKE,KAAKf,GAAO,GAAGgB,YACvC,MAAOC,GACHA,aAAeC,aACjBjB,EAAQ,QAyCakB,IAAehB,UAAU,SAC7CX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,mBAGhBX,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBApDKR,EAAQ,KAoDQE,UAAU,SAAhD,WD5DU,MAASiB,SAASC,eAAe","file":"static/js/main.82e3ecc8.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React, { useState } from 'react'\nimport math from 'mathjs'\nimport './App.css'\n\nexport default function App() {\n  const [expr, setExpr] = useState('')\n\n  const handleExpr = str => {\n    expr === 'Infinity' || expr === 'Err' || expr === 'NaN'\n      ? setExpr(str)\n      : setExpr(expr.concat(str))\n  }\n\n  const handleClear = () => setExpr('')\n\n  const handleEqual = () => {\n    try {\n      setExpr(math.round(math.eval(expr), 8).toString())\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        setExpr('Err')\n      }\n    }\n  }\n\n  const exprBtn = [\n    [7, 'number', '7'],\n    [8, 'number', '8'],\n    [9, 'number', '9'],\n    [<i className=\"fas fa-divide\" />, 'operator', '/'],\n    [4, 'number', '4'],\n    [5, 'number', '5'],\n    [6, 'number', '6'],\n    [<i className=\"fas fa-times\" />, 'operator', '*'],\n    [1, 'number', '1'],\n    [2, 'number', '2'],\n    [3, 'number', '3'],\n    [<i className=\"fas fa-minus\" />, 'operator', '-'],\n    [0, 'number', '0'],\n    ['Î‡', 'number', '.'],\n    [<i className=\"fas fa-plus\" />, 'operator', '+']\n  ]\n\n  return (\n    <div className=\"app\">\n      {expr ? (\n        <input readOnly value={expr} className=\"answer\" />\n      ) : (\n        <input readOnly value={0} className=\"answer\" />\n      )}\n\n      {exprBtn.map((btn, index) => (\n        <button\n          onClick={() => handleExpr(btn[2])}\n          className={btn[1]}\n          key={index}\n        >\n          {btn[0]}\n        </button>\n      ))}\n\n      <button onClick={() => handleEqual()} className=\"equal\">\n        {<i className=\"fas fa-equals\" />}\n      </button>\n\n      <button onClick={() => handleClear()} className=\"clear\">\n        clear\n      </button>\n    </div>\n  )\n}\n"],"sourceRoot":""}